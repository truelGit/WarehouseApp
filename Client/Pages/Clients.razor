@page "/clients"
@inject HttpClient Http

<h2>Клиенты</h2>

<div>
    <button class="btn btn-success" @onclick="ShowAddForm">Добавить</button>
    <button class="btn btn-warning" @onclick="ToggleArchived">
        @(showArchived ? "К рабочим" : "К архиву")
    </button>
</div>
<br/>

@if (isAdding)
{
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-warning">@errorMessage</div>
    }
    <EditForm Model="newClient" OnValidSubmit="AddClient">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-2">
            <label>Наименование</label>
            <InputText @bind-Value="newClient.Name" class="form-control" />
        </div>
        <div class="mb-2">
            <label>Адрес</label>
            <InputText @bind-Value="newClient.Address" class="form-control" />
        </div>
        <button class="btn btn-success">Сохранить</button>
    </EditForm>
}
else if (clients == null)
{
    <p>Загрузка...</p>
}
else
{
    <table class="table-bordered">
        <thead>
            <tr>
                <th>Наименование</th>
                <th>Адрес</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var c in clients)
            {
                <tr>
                    <td>@c.Name</td>
                    <td>@c.Address</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Client>? clients;
    private bool isAdding = false;
    private Client newClient = new();
    private bool showArchived = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync() => await LoadClients();

    private async Task LoadClients()
    {
        var url = $"api/clients?isArchived={showArchived.ToString().ToLower()}";
        clients = await Http.GetFromJsonAsync<List<Client>>(url);
    }

    private void ShowAddForm()
    {
        isAdding = true;
        newClient = new();
    }

    private async Task AddClient()
    {
        var response = await Http.PostAsJsonAsync("api/clients", newClient);
        if (response.IsSuccessStatusCode)
        {
            isAdding = false;
            await LoadClients();
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            errorMessage = "В системе уже зарегистрирован клиент с таким наименованием.";
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Ошибка при добавлении: {error}");
        }
    }

    private async Task ToggleArchived()
    {
        showArchived = !showArchived;
        await LoadClients();
    }

    public class Client
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Address { get; set; } = "";
        public bool IsArchived { get; set; }
    }
}
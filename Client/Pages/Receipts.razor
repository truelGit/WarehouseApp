@page "/receipts"
@inject HttpClient Http

<h2>Поступления</h2>
<div class="row">
    <div class="col">Период</div>
    <div class="col">Номер поступления</div>
    <div class="col">Ресурс</div>
    <div class="col">Единицы измерения</div>
</div>
<div class="row">
    <div class="col">
        <div class="input-group">
            <InputDate @bind-Value="filterFrom" class="form-control" />
            <InputDate @bind-Value="filterTo" class="form-control" />
        </div>
    </div>
    <div class="col">
        <select class="form-select" @onchange="OnNumbersChanged">
            @foreach (var num in allDocumentNumbers)
            {
                <option value="@num" selected="@selectedNumbers.Contains(num)">
                    @num
                </option>
            }
        </select>
    </div>
    <div class="col">
        <select class="form-select" @onchange="OnResourcesChanged">
            @foreach (var res in resources)
            {
                <option value="@res.Id" selected="@selectedResourceIds.Contains(res.Id)">@res.Name</option>
            }
        </select>
    </div>
    <div class="col">
        <select class="form-select" @onchange="OnUnitsChanged">
            @foreach (var unit in units)
            {
                <option value="@unit.Id" selected="@selectedUnitIds.Contains(unit.Id)">@unit.Name</option>
            }
        </select>
    </div>
</div>

<button class="btn btn-success mb-3" @onclick="OnAddButtonClick">
    @(isAdding ? "Сохранить" : "Добавить")
</button>
<button class="btn btn-primary mb-3" @onclick="ApplyFilters">Применить</button>

@if (isAdding)
{
    <EditForm Model="newReceipt" OnValidSubmit="SaveReceipt">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Номер</label>
            <InputText @bind-Value="newReceipt.Number" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Дата</label>
            <InputDate @bind-Value="newReceipt.Date" class="form-control" />
        </div>

        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>
                        <button type="button" class="btn btn-sm btn-success" @onclick="AddNewItem">+</button>
                    </th>
                    <th>Ресурс</th>
                    <th>Единица измерения</th>
                    <th>Количество</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in newReceipt.Items)
                {
                    <tr>
                        <td>
                            <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveItem(item)">-</button>
                        </td>
                        <td>
                            <select class="form-select" @bind="item.ResourceId" required>
                                <option value="">-- Выберите ресурс --</option>
                                @foreach (var res in resources)
                                {
                                    <option value="@res.Id">@res.Name</option>
                                }
                            </select>
                        </td>
                        <td>
                            <select class="form-select" @bind="item.UnitId" required>
                                <option value="">-- Выберите ед. измерения --</option>
                                @foreach (var unit in units)
                                {
                                    <option value="@unit.Id">@unit.Name</option>
                                }
                            </select>
                        </td>
                        <td>
                            <InputNumber @bind-Value="item.Quantity" class="form-control" min="0" step="0.01" required />
                        </td>
                    </tr>
                }
                @if (!newReceipt.Items.Any())
                {
                    <tr>
                        <td colspan="4" class="text-center">Нет позиций. Нажмите "+" чтобы добавить.</td>
                    </tr>
                }
            </tbody>
        </table>
    </EditForm>
}
else if (receipts == null)
{
    <p>Загрузка...</p>
}
else if (!receipts.Any())
{
    <p>Нет данных.</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Номер</th>
                <th>Дата</th>
                <th>Ресурс</th>
                <th>Ед. изм.</th>
                <th>Количество</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var receipt in receipts)
            {
                if (receipt.Items != null && receipt.Items.Any())
                {
                    foreach (var item in receipt.Items)
                    {
                        <tr>
                            <td>@receipt.Number</td>
                            <td>@receipt.Date.ToShortDateString()</td>
                            <td>@item.ResourceName</td>
                            <td>@item.UnitName</td>
                            <td>@item.Quantity</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td>@receipt.Number</td>
                        <td>@receipt.Date.ToShortDateString()</td>
                        <td></td>
                        <td></td>
                        <td>0</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private List<ReceiptDto>? receipts;
    private bool isAdding = false;

    private NewReceiptModel newReceipt = new();

    private List<Resource> resources = new();
    private List<Unit> units = new();
    private DateTime? filterFrom;
    private DateTime? filterTo;
    private List<int> selectedResourceIds = new();
    private List<int> selectedUnitIds = new();
    private List<string> selectedNumbers = new();
    private List<string> allDocumentNumbers = new();

    private void OnNumbersChanged(ChangeEventArgs e)
    {
        var input = e;
        var selected = new List<string>();

        if (input.Value is not null)
        {
            selected.Add(input.Value.ToString()!);
        }

        selectedNumbers = selected;
    }

    private void OnResourcesChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            var selectedOptions = (e.Value as IEnumerable<string>)?.ToList();

            if (selectedOptions != null)
            {
                selectedResourceIds = selectedOptions.Select(int.Parse).ToList();
            }
            else
            {
                if (e.Value is string singleValue)
                {
                    selectedResourceIds = new List<int> { int.Parse(singleValue) };
                }
                else
                {
                    selectedResourceIds = new List<int>();
                }
            }
        }
        else
        {
            selectedResourceIds.Clear();
        }
    }

    private void OnUnitsChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            var selectedOptions = (e.Value as IEnumerable<string>)?.ToList();

            if (selectedOptions != null)
            {
                selectedUnitIds = selectedOptions.Select(int.Parse).ToList();
            }
            else
            {
                if (e.Value is string singleValue)
                {
                    selectedUnitIds = new List<int> { int.Parse(singleValue) };
                }
                else
                {
                    selectedUnitIds = new List<int>();
                }
            }
        }
        else
        {
            selectedUnitIds.Clear();
        }
    }


    private async Task ApplyFilters()
    {
        var queryParams = new Dictionary<string, string>();

        if (filterFrom.HasValue)
            queryParams["from"] = filterFrom.Value.ToString("yyyy-MM-dd");
        if (filterTo.HasValue)
            queryParams["to"] = filterTo.Value.ToString("yyyy-MM-dd");

        foreach (var num in selectedNumbers)
            queryParams.Add("numbers", num);

        foreach (var id in selectedUnitIds)
            queryParams.Add("unitIds", id.ToString());

        foreach (var id in selectedResourceIds)
            queryParams.Add("resourceIds", id.ToString());

        var query = string.Join("&", queryParams.Select(kvp => $"{kvp.Key}={Uri.EscapeDataString(kvp.Value)}"));
        receipts = await Http.GetFromJsonAsync<List<ReceiptDto>>($"api/receipts/filtered?{query}");
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadReceipts();
        await LoadResourcesAndUnits();
    }

    private async Task LoadReceipts()
    {
        receipts = await Http.GetFromJsonAsync<List<ReceiptDto>>("api/receipts");
        if (receipts != null)
        {
            allDocumentNumbers = receipts
                .Select(r => r.Number)
                .Distinct()
                .OrderBy(n => n)
                .ToList();
        }
    }

    private async Task LoadResourcesAndUnits()
    {
        resources = await Http.GetFromJsonAsync<List<Resource>>("api/resources") ?? new List<Resource>();
        units = await Http.GetFromJsonAsync<List<Unit>>("api/units") ?? new List<Unit>();
    }

    private void ShowAddReceipt()
    {
        isAdding = true;
        newReceipt = new NewReceiptModel
            {
                Date = DateTime.Today,
                Items = new List<ReceiptItemModel>()
            };
    }

    private async Task SaveReceipt()
    {
        var response = await Http.PostAsJsonAsync("api/receipts", newReceipt);

        if (response.IsSuccessStatusCode)
        {
            isAdding = false;
            await LoadReceipts();
            StateHasChanged();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Ошибка при сохранении: {error}");
        }
    }

    private void AddNewItem()
    {
        newReceipt.Items.Add(new ReceiptItemModel());
    }

    private void RemoveItem(ReceiptItemModel item)
    {
        newReceipt.Items.Remove(item);
    }

    private void OnAddButtonClick()
    {
        if (!isAdding)
        {
            ShowAddReceipt();
        }
        else
        {
            _ = SaveReceipt();
        }
    }

    // DTO и модели для UI
    public class ReceiptDto
    {
        public int Id { get; set; }
        public string Number { get; set; } = "";
        public DateTime Date { get; set; }
        public List<ReceiptItemDto> Items { get; set; } = new();
    }

    public class ReceiptItemDto
    {
        public string ResourceName { get; set; } = "";
        public string UnitName { get; set; } = "";
        public decimal Quantity { get; set; }
    }

    public class NewReceiptModel
    {
        public string Number { get; set; } = "";
        public DateTime Date { get; set; }
        public List<ReceiptItemModel> Items { get; set; } = new();
    }

    public class ReceiptItemModel
    {
        public int ResourceId { get; set; }
        public int UnitId { get; set; }
        public decimal Quantity { get; set; }
    }

    public class Resource
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
    }

    public class Unit
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
    }
}

<script>
    window.getSelectedValues = function (selectId) {
        const select = document.getElementById(selectId);
        const selected = [];
        if (select && select.selectedOptions) {
            for (let option of select.selectedOptions) {
                selected.push(option.value);
            }
        }
        return selected;
    };
</script>

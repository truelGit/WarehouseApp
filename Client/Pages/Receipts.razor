@page "/receipts"
@inject HttpClient Http
<h2>Поступления</h2>

<button class="btn btn-success mb-3" @onclick="OnAddButtonClick">
    @(isAdding ? "Сохранить" : "Добавить")
</button>

@if (isAdding)
{
    <EditForm Model="newReceipt" OnValidSubmit="SaveReceipt">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Номер</label>
            <InputText @bind-Value="newReceipt.Number" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Дата</label>
            <InputDate @bind-Value="newReceipt.Date" class="form-control" />
        </div>

        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>
                        <button type="button" class="btn btn-sm btn-success" @onclick="AddNewItem">+</button>
                    </th>
                    <th>Ресурс</th>
                    <th>Единица измерения</th>
                    <th>Количество</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in newReceipt.Items)
                {
                    <tr>
                        <td>
                            <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveItem(item)">-</button>
                        </td>
                        <td>
                            <select class="form-select" @bind="item.ResourceId" required>
                                <option value="">-- Выберите ресурс --</option>
                                @foreach (var res in resources)
                                {
                                    <option value="@res.Id">@res.Name</option>
                                }
                            </select>
                        </td>
                        <td>
                            <select class="form-select" @bind="item.UnitId" required>
                                <option value="">-- Выберите ед. измерения --</option>
                                @foreach (var unit in units)
                                {
                                    <option value="@unit.Id">@unit.Name</option>
                                }
                            </select>
                        </td>
                        <td>
                            <InputNumber @bind-Value="item.Quantity" class="form-control" min="0" step="0.01" required />
                        </td>
                    </tr>
                }
                @if (!newReceipt.Items.Any())
                {
                    <tr>
                        <td colspan="4" class="text-center">Нет позиций. Нажмите "+" чтобы добавить.</td>
                    </tr>
                }
            </tbody>
        </table>
    </EditForm>
}
else if (receipts == null)
{
    <p>Загрузка...</p>
}
else if (!receipts.Any())
{
    <p>Нет данных.</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Номер</th>
                <th>Дата</th>
                <th>Ресурс</th>
                <th>Ед. изм.</th>
                <th>Количество</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var receipt in receipts)
            {
                @foreach (var item in receipt.Items)
                {
                    <tr>
                        <td>@receipt.Number</td>
                        <td>@receipt.Date.ToShortDateString()</td>
                        <td>@item.ResourceName</td>
                        <td>@item.UnitName</td>
                        <td>@item.Quantity</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private List<ReceiptDto>? receipts;
    private bool isAdding = false;

    private NewReceiptModel newReceipt = new();

    private List<Resource> resources = new();
    private List<Unit> units = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadReceipts();
        await LoadResourcesAndUnits();
    }

    private async Task LoadReceipts()
    {
        receipts = await Http.GetFromJsonAsync<List<ReceiptDto>>("api/receipts");
    }

    private async Task LoadResourcesAndUnits()
    {
        resources = await Http.GetFromJsonAsync<List<Resource>>("api/resources") ?? new List<Resource>();
        units = await Http.GetFromJsonAsync<List<Unit>>("api/units") ?? new List<Unit>();
    }

    private void ShowAddReceipt()
    {
        isAdding = true;
        newReceipt = new NewReceiptModel
            {
                Date = DateTime.Today,
                Items = new List<ReceiptItemModel>()
            };
    }

    private async Task SaveReceipt()
    {
        // валидация по необходимости...

        var response = await Http.PostAsJsonAsync("api/receipts", newReceipt);

        if (response.IsSuccessStatusCode)
        {
            isAdding = false;
            await LoadReceipts();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Ошибка при сохранении: {error}");
        }
    }

    private void AddNewItem()
    {
        newReceipt.Items.Add(new ReceiptItemModel());
    }

    private void RemoveItem(ReceiptItemModel item)
    {
        newReceipt.Items.Remove(item);
    }

    private void OnAddButtonClick()
    {
        if (!isAdding)
        {
            ShowAddReceipt();
        }
        else
        {
            _ = SaveReceipt();
        }
    }

    // DTO и модели для UI
    public class ReceiptDto
    {
        public int Id { get; set; }
        public string Number { get; set; } = "";
        public DateTime Date { get; set; }
        public List<ReceiptItemDto> Items { get; set; } = new();
    }

    public class ReceiptItemDto
    {
        public string ResourceName { get; set; } = "";
        public string UnitName { get; set; } = "";
        public decimal Quantity { get; set; }
    }

    public class NewReceiptModel
    {
        public string Number { get; set; } = "";
        public DateTime Date { get; set; }
        public List<ReceiptItemModel> Items { get; set; } = new();
    }

    public class ReceiptItemModel
    {
        public int ResourceId { get; set; }
        public int UnitId { get; set; }
        public decimal Quantity { get; set; }
    }

    public class Resource
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
    }

    public class Unit
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
    }
}
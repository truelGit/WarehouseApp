@page "/balance"
@using WarehouseApp.Server.Models
@using WarehouseApp.Shared.Dto
@using WarehouseApp.Shared.Models
@inject HttpClient Http

<h2>Баланс склада</h2>

<div class="row mb-3">
    <div class="col-4">
        <label>Ресурсы:</label>
        <select multiple class="form-select" @onchange="OnResourcesChanged">
            @foreach (var r in resources)
            {
                <option value="@r.Id" selected="@selectedResourceIds.Contains(r.Id)">@r.Name</option>
            }
        </select>
    </div>
    <div class="col-4">
        <label>Единицы измерения:</label>
        <select multiple class="form-select" @onchange="OnUnitsChanged">
            @foreach (var u in units)
            {
                <option value="@u.Id" selected="@selectedUnitIds.Contains(u.Id)">@u.Name</option>
            }
        </select>
    </div>
</div>

<button class="btn btn-primary mb-3" @onclick="ApplyFilters">Применить</button>

@if (balances == null)
{
    <p><em>Загрузка...</em></p>
}
else if (!balances.Any())
{
    <p>Данные не найдены.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Ресурс</th>
                <th>Единица измерения</th>
                <th>Количество</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var b in balances)
            {
                <tr>
                    <td>@b.ResourceName</td>
                    <td>@b.UnitName</td>
                    <td>@b.Quantity</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<BalanceDto> balances;
    private List<Resource> resources = new();
    private List<Unit> units = new();

    private List<int> selectedResourceIds = new();
    private List<int> selectedUnitIds = new();

    protected override async Task OnInitializedAsync()
    {
        resources = await Http.GetFromJsonAsync<List<Resource>>("api/resources");
        units = await Http.GetFromJsonAsync<List<Unit>>("api/units");
        await LoadBalances();
    }

    private async Task LoadBalances()
    {
        var url = "api/balance";
        var queryParams = new List<string>();

        if (selectedResourceIds.Any())
            queryParams.Add(string.Join("&", selectedResourceIds.Select(id => $"resourceId={id}")));

        if (selectedUnitIds.Any())
            queryParams.Add(string.Join("&", selectedUnitIds.Select(id => $"unitId={id}")));

        if (queryParams.Count > 0)
            url += "?" + string.Join("&", queryParams);

        balances = await Http.GetFromJsonAsync<List<BalanceDto>>(url);
    }

    private async Task OnResourcesChanged(ChangeEventArgs e)
    {
        selectedResourceIds = GetSelectedValues(e);
    }

    private async Task OnUnitsChanged(ChangeEventArgs e)
    {
        selectedUnitIds = GetSelectedValues(e);
    }

    private async Task ApplyFilters()
    {
        await LoadBalances();
    }

    private List<int> GetSelectedValues(ChangeEventArgs e)
    {
        if (e.Value is string[] values)
        {
            return values
                .Where(s => !string.IsNullOrWhiteSpace(s)) 
                .Select(int.Parse) 
                .ToList();
        }
        return new List<int>(); 
    }
}
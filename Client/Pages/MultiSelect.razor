<style>
    .custom-select {
        display: inline-flex;
        align-items: center;
        width: 100%;
        min-height: 38px;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: #212529;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        cursor: pointer;
    }

        .custom-select:focus {
            outline: 0;
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgb(13 110 253 / 0.25);
            background-color: #fff;
        }

    .selected-items {
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem;
        flex: 1;
    }

    .selected-item {
        background-color: #e9ecef;
        border-radius: 0.25rem;
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        color: #495057;
    }

</style>

<div class="custom-select" @onclick="ToggleDropdown" tabindex="0" @onblur="CloseDropdown">
    <div class="selected-items">
        @if (SelectedItems.Count > 0)
        {
            @foreach (var item in SelectedItems)
            {
                <span class="selected-item">@item</span>
            }
        }
    </div>

    @if (IsDropdownOpen)
    {
        <div class="dropdown-overlay" @onclick="CloseDropdown"></div>
        <div class="dropdown-options">
            @foreach (var option in Options)
            {
                var isSelected = SelectedItems.Contains(option);
                <div class="option @(isSelected ? "selected" : "")" @onclick="() => ToggleOption(option)">
                    @option
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public List<string> Options { get; set; } = new();
    [Parameter] public EventCallback<List<string>> SelectedItemsChanged { get; set; }
    [Parameter] public List<string> SelectedItems { get; set; } = new();

    private bool IsDropdownOpen { get; set; }

    private void ToggleDropdown()
    {
        IsDropdownOpen = !IsDropdownOpen;
    }

    private void CloseDropdown()
    {
        IsDropdownOpen = false;
        StateHasChanged();
    }

    private async Task ToggleOption(string option)
    {
        if (SelectedItems.Contains(option))
            SelectedItems.Remove(option);
        else
            SelectedItems.Add(option);

        await SelectedItemsChanged.InvokeAsync(SelectedItems);
    }
}
